import sys
from io import BytesIO  # Этот класс поможет нам сделать картинку из потока байт
from map_utils import calculate_spn, calculate_bbox
import requests
from PIL import Image


def get_pharmacy_color(pharmacy_data):
    hours = pharmacy_data.get("Hours", {})
    hours_text = hours.get("text", "").lower()

    if "круглосуточно" in hours_text:
        return "gn"
    elif hours_text:
        return "bl"
    else:
        return "gr"


def main():
    # Пусть наше приложение предполагает запуск:
    # python search.py Москва, ул. Ак. Королева, 12
    # Тогда запрос к геокодеру формируется следующим образом:
    # toponym_to_find = " ".join(sys.argv[1:])
    toponym_to_find = "Москва, ул. Адмирала Руднева 8, 12"
    geocoder_api_server = "http://geocode-maps.yandex.ru/1.x/"

    geocoder_params = {
        "apikey": "6efcb3a6-70e4-4738-abdf-e75aa2835e20",
        "geocode": toponym_to_find,
        "format": "json"}

    response = requests.get(geocoder_api_server, params=geocoder_params)

    if not response:
        # обработка ошибочной ситуации
        print("Ошибка выполнения запроса:")
        print(response.url)

    # Преобразуем ответ в json-объект
    json_response = response.json()
    # Получаем первый топоним из ответа геокодера.
    toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
    address_pos = toponym["Point"]["pos"].split()
    address_ll = ",".join(address_pos)
    address = toponym["metaDataProperty"]["GeocoderMetaData"]["text"]
    delta = "0.005"
    apikey = "dda3ddba-c9ea-4ead-9010-f43fbc15c6e3"
    spn = calculate_spn(toponym)
    # Собираем параметры для запроса к StaticMapsAPI:
    search_api_server = "https://search-maps.yandex.ru/v1"
    response = requests.get(search_api_server, params={
        "text": "аптека",
        "lang": "ru_RU",
        "ll": address_ll,
        "results": 10,
        "spn": spn,
        "type": "biz",
        "apikey": apikey,

    })
    pharmacies = response.json().get("features", [])
    points = [address_pos]
    pharmacy_points = []
    pt_params = [f"{address_pos[0]},{address_pos[1]},pm2rdl"]
    for pharmacy in pharmacies:
        coords = pharmacy["geometry"]["coordinates"]
        pharmacy_points.append(coords)

        meta = pharmacy["properties"]["CompanyMetaData"]
        color = get_pharmacy_color(meta)
        pt_params.append(f"{coords[0]},{coords[1]},pm2{color}m")

    map_api_server = "https://static-maps.yandex.ru/1.x/"
    map_params = {
        "l": "map",
        "pt": "~".join(pt_params),
        "bbox": calculate_bbox(points + pharmacy_points),
        "apikey": "65ff937e-7030-4077-b49f-16a9183354c4"
    }

    response = requests.get(map_api_server, params=map_params)
    print(f"\nНайдено аптек: {len(pharmacies)}")
    for i, pharmacy in enumerate(pharmacies, 1):
        meta = pharmacy["properties"]["CompanyMetaData"]
        print(f"\n{i}. {meta['name']}")
        print(f"   Адрес: {meta['address']}")
        print(f"   Режим работы: {meta.get('Hours', {}).get('text', 'нет данных')}")

    if response.ok:
        Image.open(BytesIO(response.content)).show()
    else:
        print("Ошибка получения карты:", response.status_code)


if __name__ == "__main__":
    main()
